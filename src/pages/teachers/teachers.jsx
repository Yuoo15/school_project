import React, { useState } from 'react'
import { useStorage } from '../../hooks/useStorage'
import { initialData } from '../../data/initialData'
import styles from './teachers.module.css'
import Button from '../../components/Button/button'

export default function Teachers() {
  const [data, setData, { loading, error }] = useStorage('school:data', initialData)
  const [name, setName] = useState('')
  const [subjectsInput, setSubjectsInput] = useState('')
  const [editingId, setEditingId] = useState(null)

  function addTeacher() {
    if (!name.trim()) {
      alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∏—Ç–µ–ª—è')
      return
    }
    
    const subs = subjectsInput.split(',').map(s => s.trim()).filter(Boolean)
    
    if (subs.length === 0) {
      alert('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
      return
    }

    const invalidSubjects = subs.filter(sid => !data.subjects.find(s => s.id === sid))
    if (invalidSubjects.length > 0) {
      alert(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ${invalidSubjects.join(', ')}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: ${data.subjects.map(s => s.id).join(', ')}`)
      return
    }

    const id = 't' + Date.now()
    const newTeacher = { id, name, subjects: subs }
    
    const next = {
      ...data,
      teachers: [...data.teachers, newTeacher]
    }
    
    setData(next)
    setName('')
    setSubjectsInput('')
    alert('‚úÖ –£—á–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!')
  }

  function removeTeacher(id) {
    if (!confirm('‚ùì –£–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è? –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')) return
    
    const next = {
      ...data,
      teachers: data.teachers.filter(t => t.id !== id)
    }
    setData(next)
    alert('‚úÖ –£—á–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
  }

  function updateTeacher(id) {
    if (!name.trim()) {
      alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∏—Ç–µ–ª—è')
      return
    }

    const subs = subjectsInput.split(',').map(s => s.trim()).filter(Boolean)
    
    if (subs.length === 0) {
      alert('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const invalidSubjects = subs.filter(sid => !data.subjects.find(s => s.id === sid))
    if (invalidSubjects.length > 0) {
      alert(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ${invalidSubjects.join(', ')}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: ${data.subjects.map(s => s.id).join(', ')}`)
      return
    }

    const next = {
      ...data,
      teachers: data.teachers.map(t => 
        t.id === id ? { ...t, name, subjects: subs } : t
      )
    }
    
    setData(next)
    setEditingId(null)
    setName('')
    setSubjectsInput('')
    alert('‚úÖ –£—á–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!')
  }

  function startEdit(teacher) {
    setEditingId(teacher.id)
    setName(teacher.name)
    setSubjectsInput(teacher.subjects.join(', '))
  }

  function cancelEdit() {
    setEditingId(null)
    setName('')
    setSubjectsInput('')
  }

  if (loading) {
    return (
      <div className={styles.card}>
        <h2>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</h2>
      </div>
    )
  }

  if (error) {
    return (
      <div className={styles.card}>
        <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h2>
        <p>{error.message}</p>
      </div>
    )
  }

  return (
    <div className={styles.card}>
      <h2 style={{ color: '#252B42' }}>üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏</h2>
      <p className={styles.p}>–®–∞–≥ 2 - –¥–æ–±–∞–≤—å—Ç–µ —É—á–∏—Ç–µ–ª–µ–π –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ã</p>
      <div className={styles.next}>
        <Button to="/subjects" text="–î–∞–ª—å—à–µ ‚Üí" />
      </div>

      <div style={{ display: 'flex', flexDirection: 'column', gap: 15, marginTop: 20 }}>
        <input
          className="input"
          placeholder="–§–ò–û —É—á–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.)"
          value={name}
          onChange={e => setName(e.target.value)}
        />
        <input
          className="input"
          placeholder="–ü—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (algebra, rus, eng)"
          value={subjectsInput}
          onChange={e => setSubjectsInput(e.target.value)}
        />
        
        {editingId ? (
          <div style={{ display: 'flex', gap: 10 }}>
            <button 
              className={styles.button} 
              onClick={() => updateTeacher(editingId)}
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </button>
            <button 
              className={styles.remove} 
              onClick={cancelEdit}
            >
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        ) : (
          <button className={styles.button} onClick={addTeacher}>
            –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è
          </button>
        )}
      </div>

      <div style={{ marginTop: 30 }}>
        <h3 style={{ color: '#252B42' }}>üìã –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π ({data.teachers.length})</h3>
        {data.teachers.length === 0 ? (
          <p style={{ color: '#999', fontStyle: 'italic' }}>–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∏—Ç–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!</p>
        ) : (
          <ul style={{ listStyle: 'none', padding: 0 }}>
            {data.teachers.map(t => (
              <li key={t.id} style={{ 
                marginTop: 12, 
                padding: 12, 
                background: '#f8f9fa', 
                borderRadius: 8,
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <div>
                  <b style={{ color: '#252B42', fontSize: 16 }}>{t.name}</b>
                  <p style={{ margin: '4px 0 0 0', color: '#666', fontSize: 14 }}>
                    üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {t.subjects.map(sid => {
                      const subj = data.subjects.find(s => s.id === sid)
                      return subj?.name || sid
                    }).join(', ')}
                  </p>
                  <p style={{ margin: '2px 0 0 0', color: '#999', fontSize: 12 }}>
                    ID: {t.id}
                  </p>
                </div>
                <div style={{ display: 'flex', gap: 8 }}>
                  <button 
                    className={styles.button} 
                    onClick={() => startEdit(t)}
                    style={{ padding: '6px 12px', fontSize: '13px' }}
                  >
                    –ò–∑–º–µ–Ω–∏—Ç—å
                  </button>
                  <button 
                    className={styles.remove} 
                    onClick={() => removeTeacher(t.id)}
                    style={{ padding: '6px 12px', fontSize: '13px' }}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>

    </div>
  )
}